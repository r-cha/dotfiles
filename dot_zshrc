export ZSH_DISABLE_COMPFIX="true"

export ZSH="~/.zsh"

# History
HISTSIZE=50000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory        # Immediately append to history file.
setopt sharehistory         # Share history between all sessions
setopt hist_ignore_space    # Dont record an entry starting with a space.
setopt hist_ignore_all_dups # Delete old recorded entry if new entry is a duplicate.
setopt hist_save_no_dups    # Dont write duplicate entries in the history file.
setopt hist_ignore_dups     # Dont record an entry that was just recorded again.
setopt hist_find_no_dups    # Do not display a line previously found.

# Case-insensitive completion
autoload -Uz compinit && compinit
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Key bindings
bindkey '^[[H' beginning-of-line   # Home
bindkey '^[[F' end-of-line         # End
bindkey '^[[1~' beginning-of-line  # Home (alternative)
bindkey '^[[4~' end-of-line        # End (alternative)
bindkey '^[[3~' delete-char        # Delete
bindkey '^[[1;5C' forward-word     # Ctrl+Right
bindkey '^[[1;5D' backward-word    # Ctrl+Left
bindkey '^[[A' history-search-backward    # Up arrow - search history
bindkey '^[[B' history-search-forward     # Down arrow - search history

export EDITOR='nvim'
export CLICOLOR=1

# Plugins
eval "$(zoxide init zsh)"
source <(fzf --zsh)
export FZF_DEFAULT_OPTS="--style minimal --layout reverse --preview 'fzf-preview.sh {}' --bind 'focus:transform-header:file --brief {}'"

# Random utils
alias ll='ls -al'
alias line='printf '─%.s' {1..$(tput cols)}'
mkcd() {
  mkdir -p $1 && cd $1
}

# Git
b() {
  git switch "$1" 2>/dev/null || git switch -c "$1"
}
alias s='git status --porcelain'
gcap() {
  # git commit all push
  git add --all
  git commit -m "$1"
  git push
}
alias cdr='cd $(git rev-parse --show-toplevel)' # cd to git Root
alias cdcode='cd ~/code' # cd to project library

# LLM shortcuts
sonnet() {
  llm -m claude-4-sonnet "$1"
}
opus() {
  llm -m claude-4-opus "$1"
}



# Custom prompt
autoload -Uz vcs_info
precmd() { vcs_info }
zstyle ':vcs_info:git:*' formats '%b '
setopt PROMPT_SUBST

format_path() {
  local cur=${PWD:t}                               # current folder (blue)
  local git_root prefix repo rel parent

  if git_root=$(git rev-parse --show-toplevel 2>/dev/null); then
    prefix=${git_root%/*}/                         # path before repo
    prefix=${prefix/#$HOME/\~}                     # collapse home to ~
    repo=${git_root:t}                             # repo name
    rel=${PWD#$git_root} rel=${rel#/}              # path *inside* repo
    if [[ -z $rel ]]; then                         # at repo root
      printf '%%F{8}%s%%f%%F{blue}%s%%f' "$prefix" "$repo"
    else                                           # somewhere inside repo
      parent=${rel%/*}; [[ $parent == $rel ]] && parent='' || parent="/$parent"
      printf '%%F{8}%s%%f%%F{white}%s%s/%%f%%F{blue}%s%%f' "$prefix" "$repo" "$parent" "$cur"
    fi
  else                                             # not a git repo
    local parent_path=${PWD:h}
    parent_path=${parent_path/#$HOME/\~}           # collapse home to ~
    printf '%%F{8}%s/%%f%%F{8}%s%%f' "$parent_path" "$cur"
  fi
}

NEWLINE=$'\n'
PROMPT='%F{%(?.green.red)}┌%f$(format_path)%F{red} ${vcs_info_msg_0_}%f%F{%(?.green.red)}${NEWLINE}└❯%f '
